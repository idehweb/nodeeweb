name: Publish & Deploy admin on npm

on:
  push:
    branches:
      - main
      - 'releases/**'
      - dev
    paths:
      - 'admin/**'

jobs:
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout to repository'
        uses: actions/checkout@v4

      - name: 'Setup nodeJs'
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 'Install yarn'
        run: npm i -g yarn

      - name: Setup node-gyp
        run: yarn global add node-gyp

      - name: 'Install dependencies'
        working-directory: admin
        run: yarn

      - name: 'Repository visualizer'
        id: diagram
        uses: githubocto/repo-visualizer@0.9.1
        with:
          excluded_paths: 'node_modules,build,.storybook,.github'
          output_file: 'public/diagram.svg'
          should_push: false
          root_path: 'admin/src/'
          artifact_name: 'diagram'

      - name: 'Build App'
        run: yarn build
        working-directory: admin
        env:
          CI: 'false'
          GENERATE_SOURCEMAP: 'false'

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: admin/build

  publish-npm:
    needs: build
    name: Publish on npm
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout to repository'
        uses: actions/checkout@v4

      - name: 'Check Branch'
        id: 'check_branch'
        run: |
          if [ $GITHUB_REF_NAME == 'main' ] || [[ $GITHUB_REF_NAME == release/* ]]
          then echo 'IS_PRO=true' >> $GITHUB_OUTPUT
          else echo 'IS_PRO=false' >> $GITHUB_OUTPUT
          fi
      - name: 'Setup nodeJs'
        uses: actions/setup-node@v3
        if: ${{steps.check_branch.outputs.IS_PRO == 'true' }}
        with:
          node-version: 18

      - name: 'Download build artifacts'
        uses: actions/download-artifact@v3
        if: ${{steps.check_branch.outputs.IS_PRO == 'true' }}
        with:
          name: build
          path: admin/build

      - name: 'Download diagram artifacts'
        uses: actions/download-artifact@v3
        if: ${{steps.check_branch.outputs.IS_PRO == 'true' }}
        with:
          name: diagram
          path: admin/build

      - name: 'Publish'
        working-directory: admin
        if: ${{steps.check_branch.outputs.IS_PRO == 'true' }}
        run: npm run publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

  deploy-server:
    name: 'Deploy on server'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 'Download build artifacts'
        uses: actions/download-artifact@v3
        with:
          name: build
          path: build

      - name: 'Download diagram artifacts'
        uses: actions/download-artifact@v3
        with:
          name: diagram
          path: build

      - name: 'Setup metadata'
        id: setup_metadata
        run: |
          if [ $GITHUB_REF_NAME == 'main' ] || [[ $GITHUB_REF_NAME == release/* ]]
          then echo "TARGET_PATH=/var/nodeeweb/public/admin" >> $GITHUB_OUTPUT
          else echo "TARGET_PATH=/var/instances/nwi-dev/public/admin" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: 'FTP to german server'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{secrets.GERMAN_HOST}}
          username: ${{secrets.GERMAN_FTP_USER}}
          password: ${{secrets.GERMAN_FTP_PASS}}
          local-dir: 'build/'
          server-dir: ${{steps.setup_metadata.outputs.TARGET_PATH}}

      - name: 'FTP to iran server'
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{secrets.IRAN_HOST}}
          username: ${{secrets.IRAN_FTP_USER}}
          password: ${{secrets.IRAN_FTP_PASS}}
          local-dir: 'build/'
          server-dir: ${{steps.setup_metadata.outputs.TARGET_PATH}}

  cleanup:
    name: Cleanup actions
    needs:
      - publish-npm
      - deploy-server
    runs-on: ubuntu-latest
    steps:
      - name: 'Remove build artifacts'
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            build
            diagram
